<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Alexander Jophus</title><link>https://example.com/posts/</link><description>Recent content in Posts on Alexander Jophus</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 14 Aug 2022 11:02:31 +0000</lastBuildDate><atom:link href="https://example.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>TROUBLESHOOT (A guide on debugging kubernetes)</title><link>https://example.com/posts/troubleshoot/</link><pubDate>Sun, 14 Aug 2022 11:02:31 +0000</pubDate><guid>https://example.com/posts/troubleshoot/</guid><description>Intro Link to heading Disclaimer: This post is about Replicated&amp;rsquo;s Troubleshoot - I work at Replicated.
Kubernetes is hard. I thought I understood kubernetes; I had provisioned clusters from scratch, I had installed istio and a whole bunch of other tools, I had fixed outages in the past. I then joined a organisation whose expertise were kubernetes, and oh boy did I have a lot to learn.</description></item><item><title>DEV TOOLING I USE A LOT</title><link>https://example.com/posts/dev-tooling/</link><pubDate>Sun, 06 Feb 2022 11:22:03 +0000</pubDate><guid>https://example.com/posts/dev-tooling/</guid><description>Intro Link to heading I borrow a lot from everyone I work with, so all credit goes out to everyone I&amp;rsquo;ve ever worked with. I&amp;rsquo;m going to create a few separate sections, such as kubernetes, REST, gRPC, etc. The list is by no means complete; I&amp;rsquo;m always on the lookout for new tools to play with so if I missed something, let me know and I&amp;rsquo;ll happily update this list.</description></item><item><title>MAKING THE JUMP TO GRAPHQL (Formula 1 API)</title><link>https://example.com/posts/graphql/</link><pubDate>Sun, 28 Nov 2021 17:31:17 +0000</pubDate><guid>https://example.com/posts/graphql/</guid><description>To view the final repo browse my github
Intro Link to heading Say you have a rest API and for argument sake, it&amp;rsquo;s a very RESTful implementation of a formula 1 API. You can get a list of current constructors in the standings, it provides all the information about all the constructors (or bonus points you can specify the constructor you want and retrieve just that one). Similarly you can get drivers standings, a list of circuits, and the schedule for a given season.</description></item><item><title>INFRASTRUCTURE AS CODE (Pulumi + Go)</title><link>https://example.com/posts/pulumi-gke/</link><pubDate>Sat, 20 Nov 2021 17:30:21 +0000</pubDate><guid>https://example.com/posts/pulumi-gke/</guid><description>Intro Link to heading So you&amp;rsquo;ve been playing with the cloud for a bit, you&amp;rsquo;ve been fiddling with some dials, deploying some new services, and flipping some switches. Production is running smoothly. You get the new requirements to spin up a staging environment so you can test changes before they get into production. Cool. Wait, how did we set up prod again?
Introducing the concept Infrastructure as Code, in short this allows you to commit your infrastructure to your version control system.</description></item><item><title>ADDING MIDDLEWARE TO A gRPC GO SERVICE</title><link>https://example.com/posts/middleware/</link><pubDate>Sun, 14 Nov 2021 11:17:51 +0000</pubDate><guid>https://example.com/posts/middleware/</guid><description>WARNING: This space is moving very fast, I&amp;rsquo;ll try to keep this project/blog up to date.
Intro Link to heading Let&amp;rsquo;s start by asking some questions about our service;
What was the error that caused a failure? What percentage of calls are successful? Where did our service spend most of its time/what can we optimise? Deploying a service without any logging/metrics/traces is going to cause frustration when answering these questions.</description></item><item><title>4/4 CREATING A ML CLASSIFIER GRPC SERVICE WITH GOLANG (finishing the project)</title><link>https://example.com/posts/ml-grpc-4/</link><pubDate>Sun, 07 Nov 2021 18:37:11 +0100</pubDate><guid>https://example.com/posts/ml-grpc-4/</guid><description>DISCLAIMER: This is intending to be a learning exercise and may not be the most efficient way to do things. This is intended to be a multi-part blog post describing how to create a recommender gRPC service in Go.
For the full source code, visit alexanderjophus/iris-classification.
Intro Link to heading We&amp;rsquo;ll update our server to load the theta.bin model we created in post 3. We&amp;rsquo;ll update the Predict function to use the model in the server.</description></item><item><title>3/4 CREATING A ML CLASSIFIER GRPC SERVICE WITH GOLANG (creating a model)</title><link>https://example.com/posts/ml-grpc-3/</link><pubDate>Sat, 06 Nov 2021 10:37:11 +0100</pubDate><guid>https://example.com/posts/ml-grpc-3/</guid><description>DISCLAIMER: This is intending to be a learning exercise and may not be the most efficient way to do things. This is intended to be a multi-part blog post describing how to create a recommender gRPC service in Go.
For the full source code, visit alexanderjophus/iris-classification.
Intro Link to heading In this post, we&amp;rsquo;ll learn how to create a model using gorgonia. We will be following the iris tutorial mostly, just changing a few bits here and there for our use case.</description></item><item><title>2/4 CREATING A ML CLASSIFIER GRPC SERVICE WITH GOLANG (implementing a server)</title><link>https://example.com/posts/ml-grpc-2/</link><pubDate>Fri, 05 Nov 2021 15:37:11 +0100</pubDate><guid>https://example.com/posts/ml-grpc-2/</guid><description>DISCLAIMER: This is intending to be a learning exercise and may not be the most efficient way to do things. This is intended to be a multi-part blog post describing how to create a recommender gRPC service in Go.
For the full source code, visit alexanderjophus/iris-classification.
Intro Link to heading In this section we&amp;rsquo;re going to implement a gRPC service and test it via manual external tools evans.</description></item><item><title>1/4 CREATING A ML CLASSIFIER GRPC SERVICE WITH GOLANG (the gRPC bit)</title><link>https://example.com/posts/ml-grpc-1/</link><pubDate>Sun, 07 Feb 2021 15:37:11 +0100</pubDate><guid>https://example.com/posts/ml-grpc-1/</guid><description>Edited 05/11/2021: Uses buf for proto generation/linting
DISCLAIMER: This is intending to be a learning exercise and may not be the most efficient way to do things. This is intended to be a multi-part blog post describing how to create a recommender gRPC service in Go.
For the full source code, visit alexanderjophus/iris-classification.
Intro Link to heading We&amp;rsquo;ll discover what proto is, create and define a service. We will also generate code through buf.</description></item><item><title>ADDING COMPILE TIME INFORMATION TO YOUR GO BINARIES</title><link>https://example.com/posts/using-ldflags/</link><pubDate>Sun, 31 Jan 2021 15:51:31 +0100</pubDate><guid>https://example.com/posts/using-ldflags/</guid><description>From time to time it’s important to be able to tell certain metadata about exactly what is running. A couple important use cases may be; injecting the commit SHA to know exactly what code is running; injecting the build time to know how old the build is; and many more!
Introducing ldflags! It allows us to inject compile time information into our binaries. Let’s take a quick look at a small example.</description></item></channel></rss>