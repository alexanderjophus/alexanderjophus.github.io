<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iris on Alexander Joseph</title><link>http://example.org/tags/iris/</link><description>Recent content in iris on Alexander Joseph</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 07 Nov 2021 18:37:11 +0100</lastBuildDate><atom:link href="http://example.org/tags/iris/index.xml" rel="self" type="application/rss+xml"/><item><title>4/4 CREATING A ML CLASSIFIER GRPC SERVICE WITH GOLANG (finishing the project)</title><link>http://example.org/posts/ml-grpc-4/</link><pubDate>Sun, 07 Nov 2021 18:37:11 +0100</pubDate><guid>http://example.org/posts/ml-grpc-4/</guid><description>DISCLAIMER: This is intending to be a learning exercise and may not be the most efficient way to do things. This is intended to be a multi-part blog post describing how to create a recommender gRPC service in Go.
For the full source code, visit trelore/iris-classification.
Intro We&amp;rsquo;ll update our server to load the theta.bin model we created in post 3. We&amp;rsquo;ll update the Predict function to use the model in the server.</description></item><item><title>3/4 CREATING A ML CLASSIFIER GRPC SERVICE WITH GOLANG (creating a model)</title><link>http://example.org/posts/ml-grpc-3/</link><pubDate>Sat, 06 Nov 2021 10:37:11 +0100</pubDate><guid>http://example.org/posts/ml-grpc-3/</guid><description>DISCLAIMER: This is intending to be a learning exercise and may not be the most efficient way to do things. This is intended to be a multi-part blog post describing how to create a recommender gRPC service in Go.
For the full source code, visit trelore/iris-classification.
Intro In this post, we&amp;rsquo;ll learn how to create a model using gorgonia. We will be following the iris tutorial mostly, just changing a few bits here and there for our use case.</description></item><item><title>2/4 CREATING A ML CLASSIFIER GRPC SERVICE WITH GOLANG (implementing a server)</title><link>http://example.org/posts/ml-grpc-2/</link><pubDate>Fri, 05 Nov 2021 15:37:11 +0100</pubDate><guid>http://example.org/posts/ml-grpc-2/</guid><description>DISCLAIMER: This is intending to be a learning exercise and may not be the most efficient way to do things. This is intended to be a multi-part blog post describing how to create a recommender gRPC service in Go.
For the full source code, visit trelore/iris-classification.
Intro In this section we&amp;rsquo;re going to implement a gRPC service and test it via manual external tools evans.
Setting up For this we will ignore all machine learning and just get our server returning a random iris classification.</description></item><item><title>1/4 CREATING A ML CLASSIFIER GRPC SERVICE WITH GOLANG (the gRPC bit)</title><link>http://example.org/posts/ml-grpc-1/</link><pubDate>Sun, 07 Feb 2021 15:37:11 +0100</pubDate><guid>http://example.org/posts/ml-grpc-1/</guid><description>Edited 05/11/2021: Uses buf for proto generation/linting
DISCLAIMER: This is intending to be a learning exercise and may not be the most efficient way to do things. This is intended to be a multi-part blog post describing how to create a recommender gRPC service in Go.
For the full source code, visit trelore/iris-classification.
Intro We&amp;rsquo;ll discover what proto is, create and define a service. We will also generate code through buf.</description></item></channel></rss>