<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Alexander Joseph</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on Alexander Joseph</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 07 Feb 2021 15:37:11 +0100</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ADDING COMPILE TIME INFORMATION TO YOUR GO BINARIES</title>
      <link>http://example.org/posts/recommender-grpc/</link>
      <pubDate>Sun, 07 Feb 2021 15:37:11 +0100</pubDate>
      
      <guid>http://example.org/posts/recommender-grpc/</guid>
      <description>DISCLAIMER: This is intending to be a learning exercise and may not be the most efficient way to do things. This is intended to be a multi-part blog post describing how to create a recommender gRPC service in Go.
In this post we’re going to cover how to define a contract between a client and a server using gRPC. gRPC is an open source Remote Procedure Call framework, it uses protocol buffers as the description language.</description>
    </item>
    
    <item>
      <title>ADDING COMPILE TIME INFORMATION TO YOUR GO BINARIES</title>
      <link>http://example.org/posts/using-ldflags/</link>
      <pubDate>Sun, 31 Jan 2021 15:51:31 +0100</pubDate>
      
      <guid>http://example.org/posts/using-ldflags/</guid>
      <description>From time to time it’s important to be able to tell certain metadata about exactly what is running. A couple important use cases may be; injecting the commit SHA to know exactly what code is running; injecting the build time to know how old the build is; and many more!
Introducing ldflags! It allows us to inject compile time information into our binaries. Let’s take a quick look at a small example.</description>
    </item>
    
  </channel>
</rss>
